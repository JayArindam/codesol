[
  {
    "id": 1,
    "question": "2418",
    "solutionCpp": "class Solution {\npublic:\n    vector<string> sortPeople(vector<string>& names, vector<int>& heights) {\n        vector<int>height = heights;\n        vector<string>ans;\n        sort(height.begin(),height.end());\n        reverse(height.begin(),height.end());\n        for (const auto cur_hei : height) {\n            for (int i{0} ; i<heights.size() ; i++) {\n                if (heights[i] == cur_hei) {\n                    ans.push_back(names[i]);\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "solutionJava": "",
    "solutionPython": "",
    "questionLink": "https://leetcode.com/problems/sort-the-people/description/"
  },
  {
    "id": 2,
    "question": "3289",
    "solutionCpp": "class Solution {\npublic:\n    vector<int> getSneakyNumbers(vector<int>& nums) {\n        vector <int> ans;\n        for (int i{0} ; i<nums.size() ; i++) {\n            for (int j{i+1} ; j<nums.size() ; j++) {\n                if (nums[i] == nums[j]) {\n                    ans.push_back(nums[i]);\n                    break;\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "solutionJava": "",
    "solutionPython": "",
    "questionLink": "https://leetcode.com/problems/the-two-sneaky-numbers-of-digitville/"
  },
  {
    "id": 3,
    "question": "1512",
    "questionLink": "https://leetcode.com/problems/number-of-good-pairs/description/",
    "solutionCpp": "class Solution {\npublic:\n    int numIdenticalPairs(vector<int>& nums) {\n        int ans{0};\n        for (int i{0} ; i<nums.size()-1 ; i++) {\n            for(int j{i+1} ; j<nums.size() ; j++) {\n                if (nums[i] == nums[j]) {\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "solutionJava": "",
    "solutionPython": ""
  }
]